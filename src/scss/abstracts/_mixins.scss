@use "abstracts/variables";
@use "themes/theme_vars" as themeVars;

// Border
@mixin border-standard(
    $radius: null,
    $color: themeVars.$color-on-system-background,
    $top: null,
    $right: null,
    $bottom: null,
    $left: null
) {
    @if ($radius) {
        @extend %border-standard-rounded; // Use rounded border if radius is provided
    } @else {
        @extend %border-standard; // Use standard border
    }

    @if not $top and not $right and not $bottom and not $left {
        border-width: 1px;
    }

    @if $top or $right or $bottom or $left {
        border-width: 0px;
    }

    @if $top {
        border-top-width: $top;
    }

    @if $right {
        border-right-width: $right;
    }

    @if $bottom {
        border-bottom-width: $bottom;
    }

    @if $left {
        border-left-width: $left;
    }

    border-color: $color;
}

// Display
@mixin flexbox($flex-direction: row, $align-items: flex-start, $justify-content: flex-start) {
    @extend %display-flex;
    flex-direction: $flex-direction;
    align-items: $align-items;
    justify-content: $justify-content;
}

// Responsize
$breakpoints: (
    "small": 767px,
    "medium": 992px,
    "large": 1200px,
) !default;

@mixin respond-to($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

// Spacing
@mixin spacing($property, $factor: 1) {
    #{$property}: calc(#{variables.$spacing} * #{$factor});
}

// Style
@mixin container-style($overflow: hidden, $height: 100%, $box-sizing: border-box) {
    overflow-y: $overflow;
    height: $height;
    box-sizing: $box-sizing;
}

@mixin link-style($color: inherit, $text-decoration: underline) {
    color: $color;
    text-decoration: $text-decoration;
}
